package tuloskortti.test;
// Generated by ComTest BEGIN
import fi.jyu.mit.ohj2.Suuntaaja;
import static org.junit.Assert.*;
import org.junit.*;
import tuloskortti.*;
// Generated by ComTest END
import tuloskortti.Kierros.YksittainenKierros;

/**
 * Test class made by ComTest
 * @version 2022.08.25 17:11:27 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KierrosTest {



  // Generated by ComTest BEGIN
  /** testTulosta84 */
  @Test
  public void testTulosta84() {    // Kierros: 84
    Kierros kierros = new Kierros(1, 1, "01-01-2001", 55, 1, 3); 
    Suuntaaja.StringOutput so = new Suuntaaja.StringOutput(); 
    String tulos = "004|1|1|01-01-2001|55|1|3"; 
    kierros.tulosta(System.out); 
    assertEquals("From: Kierros line: 91", null, so.ero(tulos)); 
    so.palauta(); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString103 */
  @Test
  public void testToString103() {    // Kierros: 103
    Kierros k = new Kierros(); 
    k.parse("       3         |       4    |   1"); 
    assertEquals("From: Kierros line: 106", true, k.toString().startsWith("3|4|1")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi217 */
  @Test
  public void testRekisteroi217() {    // Kierros: 217
    Kierros kierros1 = new Kierros(); 
    assertEquals("From: Kierros line: 219", 0, kierros1.getTunnusNro()); 
    kierros1.rekisteroi(); 
    Kierros kierros2 = new Kierros(); 
    kierros2.rekisteroi(); 
    int n1 = kierros1.getTunnusNro(); 
    int n2 = kierros2.getTunnusNro(); 
    assertEquals("From: Kierros line: 225", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse239 */
  @Test
  public void testParse239() {    // Kierros: 239
    Kierros kierros = new Kierros(); 
    assertEquals("From: Kierros line: 242", 0, kierros.getTunnusNro()); 
    assertEquals("From: Kierros line: 243", false, kierros.toString().startsWith("3|1|1")); 
    kierros.rekisteroi(); 
    int n = kierros.getTunnusNro(); 
    kierros.parse("" + (n + 20));  // Otetaan merkkijonon alusta vain id numero ja lisätään siihen 20
    kierros.rekisteroi();  // Tarkistetaan tämän jälkeen, että tulee isompi numero
    assertEquals("From: Kierros line: 248", n + 20 + 1, kierros.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone266 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone266() throws CloneNotSupportedException {    // Kierros: 266
    Kierros k1 = new Kierros(); 
    k1.parse("       1         |       1     |   01-01-2001"); 
    Kierros kopio = k1.clone(); 
    assertEquals("From: Kierros line: 271", k1.toString(), kopio.toString()); 
    k1.parse("    1    | 2    | 01-01-2002"); 
    assertEquals("From: Kierros line: 273", false, kopio.toString().equals(k1.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLuoDummyKierros287 */
  @Test
  public void testLuoDummyKierros287() {    // Kierros: 287
    Kierros kierros = new Kierros(); 
    assertEquals("From: Kierros line: 289", 0, kierros.getTunnusNro()); 
    kierros.luoDummyKierros(1); 
    assertEquals("From: Kierros line: 291", 5, kierros.getTunnusNro()); 
    assertEquals("From: Kierros line: 292", "01-01-1990", kierros.getPelattuPaiva()); 
    assertEquals("From: Kierros line: 293", 62, kierros.getPelattuTee()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString375 */
  @Test
  public void testToString375() {    // Kierros: 375
    Kierros kierros = new Kierros(); 
    YksittainenKierros yk = new YksittainenKierros("01-01-2001", "Ankka Golf", "59", kierros); 
    assertEquals("From: Kierros line: 379", "01-01-2001 Ankka Golf 59", yk.toString()); 
  } // Generated by ComTest END
}