package tuloskortti.test;
// Generated by ComTest BEGIN
import static org.junit.Assert.*;
import org.junit.*;
import tuloskortti.*;
// Generated by ComTest END
import tuloskortti.Kierros.YksittainenKierros;

/**
 * Test class made by ComTest
 * @version 2022.08.29 16:19:29 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class KierrosTest {



  // Generated by ComTest BEGIN
  /** testToString92 */
  @Test
  public void testToString92() {    // Kierros: 92
    Kierros k = new Kierros(); 
    k.parse("       3         |       4    |   1"); 
    assertEquals("From: Kierros line: 95", true, k.toString().startsWith("3|4|1")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testRekisteroi207 */
  @Test
  public void testRekisteroi207() {    // Kierros: 207
    Kierros kierros1 = new Kierros(); 
    assertEquals("From: Kierros line: 209", 0, kierros1.getTunnusNro()); 
    kierros1.rekisteroi(); 
    Kierros kierros2 = new Kierros(); 
    kierros2.rekisteroi(); 
    int n1 = kierros1.getTunnusNro(); 
    int n2 = kierros2.getTunnusNro(); 
    assertEquals("From: Kierros line: 215", n2-1, n1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testParse229 */
  @Test
  public void testParse229() {    // Kierros: 229
    Kierros kierros = new Kierros(); 
    assertEquals("From: Kierros line: 232", 0, kierros.getTunnusNro()); 
    assertEquals("From: Kierros line: 233", false, kierros.toString().startsWith("3|1|1")); 
    kierros.rekisteroi(); 
    int n = kierros.getTunnusNro(); 
    kierros.parse("" + (n + 20));  // Otetaan merkkijonon alusta vain id numero ja lisätään siihen 20
    kierros.rekisteroi();  // Tarkistetaan tämän jälkeen, että tulee isompi numero
    assertEquals("From: Kierros line: 238", n + 20 + 1, kierros.getTunnusNro()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testClone256 
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testClone256() throws CloneNotSupportedException {    // Kierros: 256
    Kierros k1 = new Kierros(); 
    k1.parse("       1         |       1     |   01-01-2001"); 
    Kierros kopio = k1.clone(); 
    assertEquals("From: Kierros line: 261", k1.toString(), kopio.toString()); 
    k1.parse("    1    | 2    | 01-01-2002"); 
    assertEquals("From: Kierros line: 263", false, kopio.toString().equals(k1.toString())); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testLuoDummyKierros277 */
  @Test
  public void testLuoDummyKierros277() {    // Kierros: 277
    Kierros kierros = new Kierros(); 
    assertEquals("From: Kierros line: 279", 0, kierros.getTunnusNro()); 
    kierros.luoDummyKierros(1); 
    assertEquals("From: Kierros line: 281", "01-01-1990", kierros.getPelattuPaiva()); 
    assertEquals("From: Kierros line: 282", 62, kierros.getPelattuTee()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** testToString365 */
  @Test
  public void testToString365() {    // Kierros: 365
    Kierros kierros = new Kierros(); 
    YksittainenKierros yk = new YksittainenKierros("01-01-2001", "Ankka Golf", "59", kierros); 
    assertEquals("From: Kierros line: 369", "01-01-2001 Ankka Golf 59", yk.toString()); 
  } // Generated by ComTest END
}